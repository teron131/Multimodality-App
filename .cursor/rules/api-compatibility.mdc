---
description: 
globs: 
alwaysApply: true
---
# OpenAI API Compatibility Standards

## üéØ Core Principle
**ALWAYS maintain OpenAI API compatibility** while implementing Gemini's advanced multimodal capabilities. This enables seamless model provider switching.

## üìã API Response Format Standards

### ‚úÖ Required OpenAI-Compatible Structure
All endpoints must follow OpenAI's response patterns defined in [schema.py](mdc:multimodality_app/schema.py):

```python
# Chat completions (multimodal)
{
    "id": "chatcmpl-123",
    "object": "chat.completion",
    "created": 1234567890,
    "model": "gpt-4-vision-preview",  # Or configured model
    "choices": [{
        "index": 0,
        "message": {
            "role": "assistant",
            "content": "Response text"
        },
        "finish_reason": "stop"
    }],
    "usage": {
        "prompt_tokens": 100,
        "completion_tokens": 50,
        "total_tokens": 150
    }
}
```

### üé• Media Processing Integration
Routes in [multimodality_app/routes/](mdc:multimodality_app/routes) should:
- Accept OpenAI-format requests with media attachments
- Process via [media_processing/](mdc:multimodality_app/media_processing) modules
- Return OpenAI-compatible responses with enhanced Gemini capabilities

## üîÑ Model Switching Logic

### Configuration in [config.py](mdc:multimodality_app/config.py)
```python
# Support multiple providers with OpenAI-compatible interface
SUPPORTED_MODELS = {
    "gpt-4-vision-preview": "openai",
    "gemini-pro-vision": "google", 
    "claude-3-opus": "anthropic"
}
```

### Implementation in [llm.py](mdc:multimodality_app/llm.py)
- Maintain single interface for all model providers
- Transform requests/responses to maintain OpenAI compatibility
- Handle provider-specific features transparently

## üöÄ Gemini Feature Implementation

### Advanced Capabilities to Build
1. **Enhanced Vision Understanding** - Image analysis beyond basic description
2. **Multi-turn Conversations** - Context-aware multimodal chats
3. **Real-time Processing** - Live audio/video analysis via [realtime.py](mdc:multimodality_app/routes/realtime.py)
4. **Code Generation** - From images, audio instructions, or multimodal input

### OpenAI Compatibility Requirements
- All Gemini features accessible via OpenAI-style endpoints
- Standard error codes and messages
- Consistent authentication patterns
- OpenAI SDK compatibility where possible

## üìù Error Handling Standards
Follow OpenAI error format in all responses:
```python
{
    "error": {
        "message": "Invalid request format",
        "type": "invalid_request_error",
        "code": "invalid_request"
    }
}
```

## üß™ Testing Compatibility  
Ensure all endpoints can be called with:
- OpenAI Python SDK
- Standard HTTP clients expecting OpenAI format
- Drop-in replacement scenarios
